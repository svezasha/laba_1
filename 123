header.h
#ifndef HEADER_H_INCLUDED
#define HEADER_H_INCLUDED
#include <windows.h>
using namespace std;
class Info
{
public:
    virtual void fileName() = 0;
    virtual ~Info(){};
};
class fileInfo: public Info
{
    string folder;
    WIN32_FIND_DATA fileData;
public:
    fileInfo (string _folder, WIN32_FIND_DATA _fileData) : folder(_folder), fileData(_fileData){}
    void fileName();
};
class Iterator
{
public:
    virtual Info* next() = 0;

};
class fileIterator : public Iterator
{
    string folder;
    string mask;
    HANDLE hf;
    WIN32_FIND_DATA findFileData;
    bool firstRun;
    Iterator* it;
public:
    fileIterator(string _folder, string _mask) : folder(_folder), mask(_mask), hf(0), firstRun(true), it(NULL) {}
    ~fileIterator();
    Info* next();
};
#endif

functions.cpp
#include <iostream>
#include <windows.h>
#include "header.h"
using namespace std;

void fileInfo::fileName()
{
    cout << folder << fileData.cFileName << endl;
}

Info* fileIterator::next() {
    do {
        if (it != NULL) {
            Info* res = it->next();
            if (res != NULL)
                return res;

            delete it;
            it = NULL;
        }

        if (firstRun) {
            hf=FindFirstFile((folder + mask).c_str(), &findFileData);
            if (hf == INVALID_HANDLE_VALUE) {
                return NULL;
            }

            firstRun = false;
        }
        else {
            if (FindNextFile(hf, &findFileData) == 0)
                return NULL;
        }

        if (findFileData.dwFileAttributes != FILE_ATTRIBUTE_DIRECTORY) {
            return new fileInfo(folder, findFileData);
        }

        if ((strcmp(findFileData.cFileName,".") == 0) || (strcmp(findFileData.cFileName,"..")==0))
                continue;
        it = new fileIterator(folder + findFileData.cFileName + "\\", mask);
    }
    while(true);
		FindClose(hf);
   		it->next();
}

main.cpp
#include <iostream>
#include "header.h"

using namespace std;

int main()
{
    string folder = "C:\\Users\\Public\\Documents\\";
    string mask = "*.*";
    Info *info = NULL;
    Iterator *it = new fileIterator(folder,mask);
    while ((info = it->next()) != NULL)
    {
        info->fileName();
        delete info;
    }
    return 0;
}

